openapi: 3.0.0
info:
  title: Mercearia Digital API
  version: 1.0.0
  description: API de autenticação com verificação de e-mail, RBAC e autenticação em dois fatores
servers:
  - url: http://localhost:3000/api
    description: Servidor de desenvolvimento
  - url: https://api.mercearia.digital/api
    description: Servidor de produção

tags:
  - name: Auth
    description: Autenticação e gerenciamento de credenciais
  - name: Users
    description: Gerenciamento de usuários
  - name: Admin
    description: Operações administrativas
  - name: RBAC
    description: Role-Based Access Control para gerenciamento de permissões

paths:
  /auth/register:
    post:
      summary: Registrar novo usuário
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuário registrado com sucesso. Verifique seu e-mail para ativar a conta.
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '400':
          description: Dados inválidos ou e-mail já registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-email:
    get:
      summary: Verificar e-mail via token
      tags:
        - Auth
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Token de verificação
      responses:
        '200':
          description: E-mail verificado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verificado com sucesso
        '400':
          description: Token inválido ou expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Autenticar usuário
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: [email, password]
      responses:
        '200':
          description: Login bem-sucedido
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '206':
          description: Login parcial - 2FA necessário
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 2FA necessário
                  tempToken:
                    type: string
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Conta não verificada ou bloqueada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/2fa/verify:
    post:
      summary: Verificar token 2FA durante login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Token TOTP de 6 dígitos
                tempToken:
                  type: string
                  description: Token temporário recebido no login parcial
              required: [token, tempToken]
      responses:
        '200':
          description: Verificação 2FA bem-sucedida
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  user:
                    $ref: '#/components/schemas/UserBasic'
        '401':
          description: Token 2FA inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/2fa/setup:
    post:
      summary: Configurar autenticação de dois fatores
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 2FA configurado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  qrCode:
                    type: string
                    description: QR Code em formato data URL
                  recoveryCodes:
                    type: array
                    items:
                      type: string
                    description: Códigos de recuperação para uso em emergência

  /auth/2fa/disable:
    post:
      summary: Desativar autenticação de dois fatores
      tags:
        - Auth
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Token TOTP de 6 dígitos atual
              required: [token]
      responses:
        '200':
          description: 2FA desativado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 2FA desativado com sucesso
        '401':
          description: Token 2FA inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh-token:
    post:
      summary: Atualizar tokens usando refresh token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: Refresh token (opcional se estiver em cookie)
      responses:
        '200':
          description: Tokens atualizados com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Refresh token inválido, expirado ou revogado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout do usuário
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout realizado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout realizado com sucesso

  /auth/password-reset/request:
    post:
      summary: Solicitar redefinição de senha
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required: [email]
      responses:
        '200':
          description: Instruções enviadas por e-mail (mesmo resposta para e-mails não cadastrados)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Instruções de redefinição enviadas para o e-mail

  /auth/password-reset/confirm:
    post:
      summary: Confirmar redefinição de senha
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Token de redefinição de senha
                newPassword:
                  type: string
                  format: password
                  description: Nova senha
              required: [token, newPassword]
      responses:
        '200':
          description: Senha alterada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Senha redefinida com sucesso
        '400':
          description: Token inválido ou expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/google:
    get:
      summary: Iniciar autenticação com Google
      tags:
        - Auth
      responses:
        '302':
          description: Redirecionamento para página de autorização do Google

  /auth/google/callback:
    get:
      summary: Callback da autenticação Google
      tags:
        - Auth
      parameters:
        - in: query
          name: code
          schema:
            type: string
          description: Código de autorização fornecido pelo Google
        - in: query
          name: state
          schema:
            type: string
          description: Estado para prevenção CSRF
      responses:
        '302':
          description: Redirecionamento para frontend com token de acesso

  /users/me:
    post:
      summary: Validar token de autenticação (endpoint leve)
      description: Endpoint para validação rápida do token sem busca no banco de dados
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token válido
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  userId:
                    type: string
                    description: ID do usuário autenticado
                  email:
                    type: string
                    format: email
                    description: Email do usuário autenticado
                  role:
                    type: string
                    description: Papel do usuário no sistema
        '401':
          description: Token inválido ou expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/profile:
    get:
      summary: Obter perfil do usuário atual
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil do usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
    put:
      summary: Atualizar perfil do usuário
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Perfil atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/password:
    put:
      summary: Alterar senha do usuário
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
              required: [currentPassword, newPassword]
      responses:
        '200':
          description: Senha alterada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Senha alterada com sucesso
        '400':
          description: Senha atual incorreta ou nova senha inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Listar todos os usuários (somente admin)
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número da página
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Quantidade de itens por página
        - in: query
          name: sort
          schema:
            type: string
            default: email
          description: Campo para ordenação
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Ordem da ordenação
        - in: query
          name: search
          schema:
            type: string
          description: Termo de busca (aplicado ao email)
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProfile'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: Total de registros
                      page:
                        type: integer
                        description: Página atual
                      pages:
                        type: integer
                        description: Total de páginas
                      limit:
                        type: integer
                        description: Itens por página
        '403':
          description: Acesso negado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Obter usuário por ID (somente admin)
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID do usuário
      responses:
        '200':
          description: Detalhes do usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Atualizar usuário por ID (somente admin)
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserUpdate'
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Desativar usuário por ID (somente admin)
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID do usuário
      responses:
        '200':
          description: Usuário desativado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Usuário desativado com sucesso
        '400':
          description: Não é possível desativar o próprio usuário
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health:
    get:
      summary: Verificar status da API
      tags:
        - System
      responses:
        '200':
          description: Status da API
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: UP
                  timestamp:
                    type: string
                    format: date-time

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum: [user, admin]
          default: user
        enable2FA:
          type: boolean
          default: false
      required: [email, password]

    UserBasic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin]
        verified:
          type: boolean
        twoFactorEnabled:
          type: boolean
        lastLogin:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserDetails:
      allOf:
        - $ref: '#/components/schemas/UserProfile'
        - type: object
          properties:
            active:
              type: boolean
            failedLoginAttempts:
              type: integer
            lockUntil:
              type: string
              format: date-time
              nullable: true

    UserProfileUpdate:
      type: object
      properties:
        name:
          type: string
        phoneNumber:
          type: string
        address:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            postalCode:
              type: string
            country:
              type: string

    AdminUserUpdate:
      type: object
      properties:
        role:
          type: string
          enum: [user, admin]
        verified:
          type: boolean
        active:
          type: boolean
        twoFactorEnabled:
          type: boolean

    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Descrição do erro
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  # Rotas para gerenciamento de papéis (roles)
  /rbac/roles:
    post:
      summary: Criar novo papel
      tags:
        - RBAC
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreate'
      responses:
        '201':
          description: Papel criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Permissão negada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Papel já existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Listar todos os papéis
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número da página
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Quantidade de itens por página
        - in: query
          name: sort
          schema:
            type: string
            default: name
          description: Campo para ordenação
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Ordem da ordenação
        - in: query
          name: search
          schema:
            type: string
          description: Termo de busca (aplicado ao nome e descrição)
        - in: query
          name: isSystem
          schema:
            type: boolean
          description: Filtrar por papéis do sistema
      responses:
        '200':
          description: Lista de papéis
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Permissão negada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rbac/roles/{id}:
    get:
      summary: Obter papel por ID
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID do papel
      responses:
        '200':
          description: Detalhes do papel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Papel não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Atualizar papel por ID
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID do papel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdate'
      responses:
        '200':
          description: Papel atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Papel não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remover papel por ID
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID do papel
      responses:
        '200':
          description: Papel removido com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Papel removido com sucesso
        '400':
          description: Não é possível excluir papel do sistema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Papel não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Rotas para gerenciamento de permissões
  /rbac/permissions:
    post:
      summary: Criar nova permissão
      tags:
        - RBAC
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionCreate'
      responses:
        '201':
          description: Permissão criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Permissão já existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Listar todas as permissões
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número da página
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Quantidade de itens por página
        - in: query
          name: sort
          schema:
            type: string
            default: name
          description: Campo para ordenação
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Ordem da ordenação
        - in: query
          name: search
          schema:
            type: string
          description: Termo de busca (aplicado ao nome, código e descrição)
        - in: query
          name: category
          schema:
            type: string
            enum: [user, product, order, delivery, report, system]
          description: Filtrar por categoria
      responses:
        '200':
          description: Lista de permissões
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '403':
          description: Permissão negada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rbac/permissions/{id}:
    get:
      summary: Obter permissão por ID
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID da permissão
      responses:
        '200':
          description: Detalhes da permissão
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '404':
          description: Permissão não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Atualizar permissão por ID
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID da permissão
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionUpdate'
      responses:
        '200':
          description: Permissão atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Permissão não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remover permissão por ID
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID da permissão
      responses:
        '200':
          description: Permissão removida com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Permissão removida com sucesso
        '400':
          description: Não é possível excluir permissão em uso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Permissão não encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Rotas para gerenciamento da relação entre papéis e permissões
  /rbac/roles/{roleId}/permissions/{permissionId}:
    post:
      summary: Adicionar permissão a um papel
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roleId
          schema:
            type: string
          required: true
          description: ID do papel
        - in: path
          name: permissionId
          schema:
            type: string
          required: true
          description: ID da permissão
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resources:
                  type: array
                  items:
                    type: object
                    properties:
                      resource:
                        type: string
                        description: ID do recurso
                      conditions:
                        type: object
                        description: Condições de acesso ao recurso
                  description: Lista de recursos associados à permissão
      responses:
        '200':
          description: Permissão adicionada ao papel com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Papel ou permissão não encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remover permissão de um papel
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: roleId
          schema:
            type: string
          required: true
          description: ID do papel
        - in: path
          name: permissionId
          schema:
            type: string
          required: true
          description: ID da permissão
      responses:
        '200':
          description: Permissão removida do papel com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Papel ou permissão não encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Rotas para gerenciamento da relação entre usuários e papéis
  /rbac/users/{userId}/roles/{roleId}:
    post:
      summary: Atribuir papel a um usuário
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID do usuário
        - in: path
          name: roleId
          schema:
            type: string
          required: true
          description: ID do papel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scope:
                  type: string
                  enum: [global, store, department]
                  default: global
                  description: Escopo do papel
                scopeId:
                  type: string
                  description: ID do contexto do escopo (obrigatório para escopos não-globais)
      responses:
        '200':
          description: Papel atribuído ao usuário com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Papel atribuído com sucesso
                  user:
                    $ref: '#/components/schemas/UserDetails'
        '404':
          description: Usuário ou papel não encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remover papel de um usuário
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID do usuário
        - in: path
          name: roleId
          schema:
            type: string
          required: true
          description: ID do papel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scope:
                  type: string
                  enum: [global, store, department]
                  default: global
                  description: Escopo do papel
                scopeId:
                  type: string
                  description: ID do contexto do escopo (necessário para escopos não-globais)
      responses:
        '200':
          description: Papel removido do usuário com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Papel removido com sucesso
                  user:
                    $ref: '#/components/schemas/UserDetails'
        '404':
          description: Usuário, papel ou atribuição não encontrados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /rbac/users/{userId}/roles:
    get:
      summary: Listar papéis de um usuário
      tags:
        - RBAC
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID do usuário
      responses:
        '200':
          description: Lista de papéis do usuário
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  email:
                    type: string
                    format: email
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        role:
                          $ref: '#/components/schemas/Role'
                        assignedAt:
                          type: string
                          format: date-time
                        assignedBy:
                          type: string
                          description: ID do usuário que atribuiu o papel
                        scope:
                          type: string
                          enum: [global, store, department]
                        scopeId:
                          type: string
                          description: ID do contexto do escopo
        '404':
          description: Usuário não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    # Modelos atualizados/adicionados para RBAC
    UserDetails:
      allOf:
        - $ref: '#/components/schemas/UserProfile'
        - type: object
          properties:
            active:
              type: boolean
            failedLoginAttempts:
              type: integer
            lockUntil:
              type: string
              format: date-time
              nullable: true
            roles:
              type: array
              items:
                type: object
                properties:
                  role:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                  scope:
                    type: string
                    enum: [global, store, department]
                  scopeId:
                    type: string
                    nullable: true
                  assignedAt:
                    type: string
                    format: date-time
                  
    Role:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        isSystem:
          type: boolean
        permissions:
          type: array
          items:
            type: object
            properties:
              permission:
                $ref: '#/components/schemas/Permission'
              resources:
                type: array
                items:
                  type: object
                  properties:
                    resource:
                      $ref: '#/components/schemas/Resource'
                    conditions:
                      type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RoleCreate:
      type: object
      properties:
        name:
          type: string
          example: "editor"
        description:
          type: string
          example: "Editor com acesso para criar e editar conteúdo"
        isSystem:
          type: boolean
          default: false
      required: [name, description]

    RoleUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    Permission:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        code:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [user, product, order, delivery, report, system]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PermissionCreate:
      type: object
      properties:
        name:
          type: string
          example: "Editar Produtos"
        code:
          type: string
          example: "PRODUCT_EDIT"
        description:
          type: string
          example: "Permissão para editar produtos existentes"
        category:
          type: string
          enum: [user, product, order, delivery, report, system]
          example: "product"
      required: [name, code, description, category]

    PermissionUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [user, product, order, delivery, report, system]

    Resource:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [route, entity, feature, report, menu]
        path:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        total:
          type: integer
          description: Total de registros
        page:
          type: integer
          description: Página atual
        pages:
          type: integer
          description: Total de páginas
        limit:
          type: integer
          description: Itens por página